# instalar plugin do loki
# docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions --enable

# x-logging: &default-logging
#   driver: loki
#   options:
#     loki-url: "http://localhost:3100/api/prom/push"
#     no-file: "false"
#     keep-file: "true"
#     loki-pipeline-stages: |
#       - multiline:
#         firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
#         max_wait_time: 3s
#       - regex:
#         expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'

# version: "3"

volumes:
  dbdata6:
  redis-insight:
  mongo-data:
  tempo-data:
  grafana-data:
  redis-data: 


services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      - MONGO_OPTIONS=--wiredTigerCacheSizeGB 2
      - MONGO_OPTIONS=--enableCompression
      - PUID=1000
      - PGID=1000
    volumes:
      - dbdata6:/data/db
    ports:
      - 27017:27017
    restart: "unless-stopped"
    deploy:
      resources:
        limits:
          memory: 3000M
          cpus: 1.0
#    logging: *default-logging

  redis:
    image: redis:7
    command: [ "redis-server", "/etc/redis/redis.conf", --requirepass redis1234 ]
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M
    sysctls:
      - net.core.somaxconn=1024
    ulimits:
      nofile:
        soft: 100000
        hard: 100000
#    logging: *default-logging

  redis-insight:
    image: redis/redisinsight:latest
    restart: always
    ports:
      - "5540:5540"
    volumes:
      - redis-insight:/data
    depends_on:
      - redis

  app-granian:
    build:
      context: ../
    ports:
      - '8000:8000'
    depends_on:
      - grafana
      - prometheus
      - tempo
    environment:
      - PROMETHEUS_MULTIPROC_DIR=metrics
      - APP_NAME=MY_FRAME_GRANIAN
      - LOGGER_LEVEL=info
      - ENDPOINT_OTEL=http://tempo:4317
      - FLAG_LOCAL=false
      - ENABLE_TRACING=true
      - ENABLE_METRICS=true
      - ENABLE_LOGGER=false
      - ENABLE_SWAGGER=true
      - WORKER=2
      - redis_url=redis://:redis1234@redis:6379/1
      - mongo_url=mongodb://mongodb:27017
      - granian_runtime_mode=st
      - enable_trace_ratio_based=true
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: 2.0
#    logging: *default-logging

  app-fastify:
    build:
      context: ../benchmark/fastify
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - TEMPO_URL=http://tempo:4317
      - SERVICE_NAME=api-fastify
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - PS_REDIS=redis1234
      - MONGODB_URL=mongodb://mongodb:27017
    depends_on:
      - grafana
      - prometheus
      - tempo
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: 2.0
#    logging: *default-logging


  webflux-app:
    build:
      context: ../benchmark/demo
    ports:
      - "8080:8080"
    depends_on:
      - grafana
      - prometheus
      - tempo
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/cotador
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=redis1234
      - OTEL_PROPAGATORS=tracecontext,baggage,
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: 2.0
    # logging: *default-logging

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3001:3000
    volumes:
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana-data:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
#    logging: *default-logging

  loki:
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./promtail.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki
#    logging: *default-logging

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus:latest
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    extra_hosts: [ "host.docker.internal:host-gateway" ]
#    logging: *default-logging

  redis_exporter:
    image: oliver006/redis_exporter:v1.54.0
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis://:redis1234@redis:6379
    depends_on:
      - redis

  mongodb_exporter:
    image: percona/mongodb_exporter:0.40
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
    ports:
      - "9216:9216"
    depends_on:
      - mongodb
    restart: always

  tempo:
    image: grafana/tempo:2.3.1
    command: ["--config.file=/etc/tempo/tempo.yaml"]
    volumes:
      - tempo-data:/var/tempo
      - ./tempo.yaml:/etc/tempo/tempo.yaml:ro
      - ./overrides.yaml:/etc/tempo/overrides.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
      - "3200:3200"   # Tempo metrics / Tempo search
    tmpfs:
      - /var/tempo:exec,nosuid,size=500m
#    logging: *default-logging

    
  # jaeger-all-in-one:
  #   image: jaegertracing/all-in-one
  #   volumes:
  #     - "./jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
  #   command:
  #     - "--prometheus.query.support-spanmetrics-connector=true"
  #     - "--prometheus.server-url=http://prometheus:9090"
  #   ports:
  #     - 5775:5775/udp
  #     - 6831:6831/udp
  #     - 6832:6832/udp
  #     - 5778:5778
  #     - 9411:9411
  #     - 16686:16686
  #     - 14268:14268
  #     - 14269:14269
  #     - 14250:14250
  #   environment:
  #     - PROMETHEUS_SERVER_URL=http://prometheus:9090
  #     - SAMPLING_CONFIG_TYPE=adaptive
  #     - METRICS_STORAGE_TYPE=prometheus
  #   logging: *default-logging

  # otelcol:
  #   image: otel/opentelemetry-collector-contrib
  #   command:
  #     [
  #       "--config=/etc/otelcol-config.yml",
  #       "--config=/etc/otelcol-config-extras.yml"
  #     ]
  #   volumes:
  #     - ./otelcol-config.yml:/etc/otelcol-config.yml
  #     - ./otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
  #   ports:
  #     - "1888:1888" # pprof extension
  #     - "8888:8888" # Prometheus metrics exposed by the collector
  #     - "8889:8889" # Prometheus exporter metrics
  #     - "13133:13133" # health_check extension
  #     - "4317:4317" # OTLP gRPC receiver
  #     - "55679:55679" # zpages extension
  #   depends_on:
  #     - jaeger-all-in-one
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 125M
  #   logging: *default-logging

  # rabbit-mq:
  #   image: rabbitmq:3.12.10-management
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   logging: *default-logging

  # proxy:
  #   image: traefik:v2.8
  #   command:
  #     - '--api.insecure=true'
  #     - '--providers.docker'
  #     - '--providers.docker.endpoint=unix:///var/run/docker.sock'
  #     - '--providers.docker.watch=true'
  #     - '--providers.docker.exposedbydefault=true'
  #     - '--log.level=DEBUG'
  #     - '--entrypoints.web.address=:80'
  #     - '--accesslog=true'
  #     - '--tracing.serviceName=traefik'
  #     - '--tracing.spanNameLimit=250'
  #     - '--tracing.jaeger=true'
  #     - '--tracing.jaeger.samplingServerURL=http://localhost:5778/sampling'
  #     - '--tracing.jaeger.samplingType=const'
  #     - '--tracing.jaeger.samplingParam=1.0'
  #     - '--tracing.jaeger.localAgentHostPort=localhost:6831'
  #     - '--tracing.jaeger.gen128Bit=true'
  #     - '--tracing.jaeger.propagation=jaeger'
  #     - '--tracing.jaeger.traceContextHeaderName=traceparent'
  #     - '--tracing.jaeger.collector.endpoint=http://localhost:14268/api/traces?format=jaeger.thrift'
  #     - '--metrics.prometheus=true'
  #     - '--metrics.prometheus.addEntryPointsLabels=true'
  #     - '--metrics.prometheus.addrouterslabels=true'
  #     - '--metrics.prometheus.addServicesLabels=true'
  #     - '--entryPoints.metrics.address=:8082'
  #     - '--metrics.prometheus.entryPoint=metrics'
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - '80:80'
  #     - '8082:8080'
  #   logging: *default-logging

  # spring-admin:
  #   image: michayaak/spring-boot-admin:2.2.3-1
  #   ports:
  #     - '8081:8080'
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.spring.rule=Host(`spring.localhost`)"
  #     - "traefik.http.services.spring.loadbalancer.server.port=8080"
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   logging: *default-logging

  # admin:
  #   image: 'gorules/brms'
  #   ports:
  #     - '9080:80'
  #   depends_on:
  #     - pg-database
  #   environment:
  #     DB_HOST: pg-database
  #     DB_PORT: 5432
  #     DB_USER: my-user
  #     DB_PASSWORD: my-password
  #     DB_NAME: test-db
  #     DB_SSL_DISABLED: true
  #     LICENSE_KEY: "30ea52df-720d-4473-8136-93014dd67e1c" # Obtain it from https://portal.gorules.io

  # pg-database:
  #   image: 'postgres'
  #   environment:
  #     POSTGRES_USER: my-user
  #     POSTGRES_PASSWORD: my-password
  #     POSTGRES_DB: test-db
  #   ports:
  #     - '5432:5432'


  # mongo:
  #   image: mongo:4.4
  #   container_name: gravitee-mongo
  #   restart: always
  #   volumes:
  #     - mongo-data:/data/db

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
  #   container_name: gravitee-elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   mem_limit: 1g

  # gateway:
  #   image: graviteeio/apim-gateway:4.0.0
  #   container_name: gravitee-gateway
  #   depends_on:
  #     - mongo
  #     - elasticsearch
  #   environment:
  #     - gravitee_management_mongodb_uri=mongodb://mongo:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=5000&socketTimeoutMS=5000
  #     - gravitee_ratelimit_mongodb_uri=mongodb://mongo:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=5000&socketTimeoutMS=5000    
  #     - gravitee_reporters_elasticsearch_endpoints_0=http://elasticsearch:9200     
  #   ports:
  #     - "8082:8082"  # porta do gateway para suas APIs

  # management_api:
  #   image: graviteeio/apim-management-api:4.0.0

  #   container_name: gravitee-management-api
  #   depends_on:
  #     - mongo
  #     - elasticsearch
  #   environment:
  #     - gravitee_management_mongodb_uri=mongodb://mongo:27017/gravitee?serverSelectionTimeoutMS=5000&connectTimeoutMS=5000&socketTimeoutMS=5000    
  #     - gravitee_analytics_elasticsearch_endpoints_0=http://elasticsearch:9200
  #   ports:
  #     - "8083:8083"

  # management_ui:
  #   image: graviteeio/apim-management-ui:4.0.0
  #   container_name: gravitee-management-ui
  #   depends_on:
  #     - management_api
  #   environment:
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200      
  #   ports:
  #     - "8084:8080"  # UI de administração

  # portal_ui:
  #   image: graviteeio/apim-portal-ui:4.0.0
  #   container_name: gravitee-portal-ui
  #   depends_on:
  #     - management_api
  #   environment:
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200      
  #   ports:
  #     - "8086:8080"  # portal do desenvolvedor (acesso externo)

